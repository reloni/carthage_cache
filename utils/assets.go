// Code generated by go-bindata.
// sources:
// resources/carthage_build_static.sh
// resources/ld.py
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesCarthage_build_staticSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xd1\x6a\x83\x30\x18\x85\xef\xff\xa7\x38\xcb\x84\x6e\x17\xad\x4f\x60\x59\xa7\xb1\x0d\x58\x2d\x25\x05\xef\x42\x4c\x63\x95\x4d\x0d\x69\xc6\xfa\xf8\x83\x6d\x8e\xd1\xbb\x03\xe7\xfb\xe0\x7b\x7c\x88\x9b\x7e\x8c\xaf\x1d\x96\x96\xe8\x66\xcc\x34\xb6\xfd\x25\x89\x9e\x86\xb7\x60\x07\x87\x38\x0c\x2e\xbe\x06\x1d\x7a\xb3\x9a\xdf\x55\xf3\xd1\xbf\x9f\x1b\x3b\x3e\x53\xf0\xda\x61\xe1\x07\x2c\x5b\xb0\x68\x06\xd8\x02\xa2\x94\x90\xfc\xb8\xc7\xee\x74\x00\xaf\x85\x24\xb2\xa6\x9b\xc0\x8a\x0c\x09\xa2\x22\x53\x87\x8d\xdc\x31\xac\xd7\xf8\xd3\x7e\x89\x8c\xbf\x9e\xb6\x4a\x94\x79\x75\xdc\x6f\xa4\xa8\x4a\xf5\xb3\x90\xe0\xfc\xa9\x7d\x7b\x27\x91\xbd\xb9\xc9\x07\xd4\x69\x95\x71\x55\xa7\x69\x55\xe6\x62\xab\x72\x51\xf0\xe4\x5f\x12\x91\xd1\x3e\x74\xfa\x62\xf1\x9d\x0f\x16\xbd\x30\xfa\x0a\x00\x00\xff\xff\x3a\xf6\xdc\x98\xff\x00\x00\x00")

func resourcesCarthage_build_staticShBytes() ([]byte, error) {
	return bindataRead(
		_resourcesCarthage_build_staticSh,
		"resources/carthage_build_static.sh",
	)
}

func resourcesCarthage_build_staticSh() (*asset, error) {
	bytes, err := resourcesCarthage_build_staticShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/carthage_build_static.sh", size: 255, mode: os.FileMode(493), modTime: time.Unix(1515759370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesLdPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x4f\xc4\x20\x10\xbd\xf3\x2b\x46\xbc\x74\x93\xda\xbd\x9b\xf4\xe0\x3f\xf0\xe0\xcd\x98\x09\x2d\xec\x2e\x2e\x85\x3a\x80\xa6\xff\xde\xb4\x50\xcb\xba\xc6\x28\xa7\xce\xf0\xe6\xe3\x3d\x5e\x6f\x6f\xf6\xd1\xd3\xbe\xd3\x76\xaf\xec\x3b\x8c\x53\x38\x39\xcb\x98\x1e\x46\x47\x01\x04\x1d\x47\x41\x5e\xad\xb1\x8f\xdd\x48\xae\x57\xde\x33\xc6\xa4\x3a\x80\x91\xd8\xbb\x61\x10\x56\x56\x82\xfa\x53\x0d\xda\x4f\x9e\x9c\x0b\x35\x1c\xb4\x51\x46\xfb\x50\x83\x8b\x61\x8c\x61\x77\xcf\x00\x00\x48\x85\x48\x16\x9e\x97\x60\x3e\xdc\xe8\x2e\x38\x67\x78\xbd\xa5\xee\x7c\x10\x41\xf7\x17\xa9\xb9\x3f\x3a\x6b\x26\x5e\xc3\x32\xab\x84\x4f\xde\xe8\x6e\x9e\xcb\x8b\x15\x0a\xc0\xba\x0c\x2f\xf6\x2a\xae\x1d\x5f\xb7\x4c\xd9\x97\x4c\xaf\x8b\xda\x48\x5c\x24\xa0\x2a\x13\x48\x11\xb4\x5f\xe2\x34\x0f\x74\x8c\x83\xb2\xe1\x31\xe3\x0a\x58\x23\xa4\x44\x91\xef\xab\x44\x82\xd7\x40\xea\x2d\x6a\x52\xb2\x7d\xa2\xa8\x7e\xc3\xaf\x5c\xfe\x53\x53\x70\xfd\x73\xcd\x2c\x80\x54\x3e\xb4\x3c\xc9\xf0\x73\x6d\x7e\xbb\xd4\x82\x31\x7d\x00\x44\x2b\x06\x85\x08\x6d\x0b\x1c\x71\x10\xda\x22\xf2\x24\xd4\xda\xde\xd7\x80\xd0\x7e\xd3\xb2\x59\x3e\xf0\x6c\xdd\x87\x9d\x17\xf1\x59\xb6\xec\x26\x68\x2f\xad\x95\x3b\x35\xc9\x64\x5b\x7c\xfd\xd6\x57\x67\x03\x6f\x8e\xdc\x72\xd9\x9b\x49\x1a\xd2\xb3\x18\xc0\x9b\x57\xa7\x6d\x95\xa7\xef\xca\xcb\xed\x07\x68\xfa\x93\xea\xcf\x98\xea\x0b\xec\x67\x00\x00\x00\xff\xff\x1f\xbb\x87\xec\x51\x03\x00\x00")

func resourcesLdPyBytes() ([]byte, error) {
	return bindataRead(
		_resourcesLdPy,
		"resources/ld.py",
	)
}

func resourcesLdPy() (*asset, error) {
	bytes, err := resourcesLdPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ld.py", size: 849, mode: os.FileMode(493), modTime: time.Unix(1515751846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/carthage_build_static.sh": resourcesCarthage_build_staticSh,
	"resources/ld.py": resourcesLdPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"carthage_build_static.sh": &bintree{resourcesCarthage_build_staticSh, map[string]*bintree{}},
		"ld.py": &bintree{resourcesLdPy, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

